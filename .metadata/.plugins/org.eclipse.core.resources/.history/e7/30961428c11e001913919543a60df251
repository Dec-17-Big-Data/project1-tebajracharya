package ques3;

import java.io.IOException;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;

/**
* Input is a comma-separated string, interpreted as Key:Value. 
* Output is Key:Value, and the key contains the Country and value is a pair of both most recent and year 2000 
* employment to population ratio, 15+, male (%) (modeled ILO estimate)
*/

public class MaleEmploymentMapper extends Mapper<LongWritable, Text, Text, Text> {
	/**
	 * The map function gets a key which is a byte offset and value is a single line from the csv file.
	 * It uses a search criteria or indicator code to filter the data and then uses a regex to split the data into words
	 * which is then iterated from the year 2000 using index value till the most recent year to average increase in female education each year. 
	 * The inputs are tests if it is a number or space. If it is a space the exception is caught and ignored.
	 * Search criteria in the mapper phase is looking for "Gross graduation ratio, tertiary, female (%)" and  
	 * "School enrollment, tertiary, female (% gross)" to determine the increase in average in female education.
	 * The matching search line is then cleaned in the mapper and the average increase in determined for each year (rounded to 3 decimal places)
	 * and output to the output file which is stored back in the HDFS and can be retried to the local drive.
	 */
	@Override
    public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
		if (value.toString().contains("SL.EMP.TOTL.SP.MA.ZS")) {
			String line[] = value.toString().split("\",\"?");
			Double toMostCurrentPercentage = 0.0;
			Double fromNeededPercentage = 0.0;
				for(int i = line.length - 1; i > 0; i--) {
					try{
						toMostCurrentPercentage = Double.parseDouble(line[i]);	
					}
					catch(Exception e) {
					}
				}
				for(int i = 44;i < line.length - 1; i++) {
					try{
						fromNeededPercentage = Double.parseDouble(line[i]);	
					}
					catch(Exception e) {
					}
				}
				String val = String.valueOf(toMostCurrentPercentage) + "," + String.valueOf(fromNeededPercentage);
				Text output = new Text();
				output.set(val);
				context.write(new Text(line[0].toString().substring(1)), new Text(val));		
		}
	}	
}
